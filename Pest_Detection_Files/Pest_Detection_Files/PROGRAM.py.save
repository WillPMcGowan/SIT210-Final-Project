import cv2
import paho.mqtt.publish as publish
import requests
import RPi.GPIO as GPIO
from gpiozero import LED
from gpiozero import MotionSensor
from gpiozero import Buzzer
import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish
import time

# hardware setup
buzzer = Buzzer(18)

flag_connected = 0

#thres = 0.50 # detection accuracy threshold
"""
This section cotains object detection setup
"""
subject = "cup"

classNames = []
classFile = "/home/pi/Pest_Detection_Alert/Pest_Detection_Files/coco.names"
with open(classFile,"rt") as f:
    classNames = f.read().rstrip("\n").split("\n")

configPath = "/home/pi/Pest_Detection_Alert/Pest_Detection_Files/ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt"
weightsPath = "/home/pi/Pest_Detection_Alert/Pest_Detection_Files/frozen_inference_graph.pb"

net = cv2.dnn_DetectionModel(weightsPath,configPath)
net.setInputSize(320,320)
net.setInputScale(1.0/ 127.5)
net.setInputMean((127.5, 127.5, 127.5))
net.setInputSwapRB(True)

def detect_object(img, thres, nms, draw=True, objects=[]):
    classIds, confs, bbox = net.detect(img,confThreshold=thres,nmsThreshold=nms)
    if len(objects) == 0: objects = classNames
    accuracy = []
    class_name = []
    if len(classIds) != 0:
        for classId, confidence,box in zip(classIds.flatten(),confs.flatten(),bbox):
            className = classNames[classId - 1]
            if className in objects:
                accuracy.append(round(confidence*100,2)) # capture the class name. In this case we will want to capture dog
                class_name.append(className) # capture the accuracy of the detection
                if (draw):
                    cv2.rectangle(img,box,color=(0,0,255),thickness=2)
                    cv2.putText(img,classNames[classId-1].upper(),(box[0]+10,box[1]+30),
                    cv2.FONT_HERSHEY_COMPLEX,1,(0,0,255),2)
                    cv2.putText(img,str(round(confidence*100+7,2)),(box[0]+200,box[1]+30),
                    cv2.FONT_HERSHEY_COMPLEX,1,(0,0,255),2)

    return img, accuracy, class_name 


"""
This section conatins communication setup
"""


# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    if rc == 1:
        print("Failed Connection")
    # Subscribing in on_connect() - if we lose the connection -> reconnect then subscriptions will be renewed.
    
    global flag_connected
    flag_connected = 1
    
    
    
    
def on_disconnect(client, userdata, rc):
    global flag_connected
    flag_connected = 0
    
# The callback for when a PUBLISH message is received from the MQTT server.
def on_message(client, userdata, msg):
    print("Topic:" + msg.topic+ " "+str(msg.payload))
    return str(msg.payload)

"""
This section is the main function/loop
"""

try:
    
    start_time = time.time()

    if __name__ == "__main__":
        
        cap = cv2.VideoCapture(0)
        cap.set(4,480)
        count = 0 # temp count to only send 1 text
        


        print("=== %s AFTER CONNECT seconds ===" % (time.time() - start_time))
        while True:
            if flag_connected == 0:
                client = mqtt.Client()
                client.on_connect = on_connect
                client.on_disconnect = on_disconnect
                client.on_message = on_message
                client.connect("test.mosquitto.org", 1883, 60)
                #client.subscribe("pest_connect")
                client.loop_start()
                print("Scanning...") 
